---
interface Props {
  title: string;
  description: string;
  image: string | string[];
  video?: string;
  link?: string;
}

const { title, description, image, video, link = "#" } = Astro.props;
const isSlider = Array.isArray(image);
const hasVideo = !!video;
const images = isSlider ? image : [image];
const cardId = title.replace(/\s+/g, '-').toLowerCase();
---

<div class="card" data-card-id={cardId}>
    <div class="card-image">
        {hasVideo ? (
          <video
            src={video}
            autoplay
            muted
            loop
            playsinline
          />
        ) : isSlider ? (
          <div class="image-slider">
              <div class="slider-container">
                  {images.map((img, index) => (
                    <img
                      src={img}
                      alt={`${title} - Image ${index + 1}`}
                      class={`slider-image ${index === 0 ? 'active' : ''}`}
                      data-index={index}
                    />
                  ))}
              </div>
              <button class="slider-btn prev-btn" aria-label="Previous image">
                  <svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                      <polyline points="15,18 9,12 15,6"></polyline>
                  </svg>
              </button>
              <button class="slider-btn next-btn" aria-label="Next image">
                  <svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                      <polyline points="9,18 15,12 9,6"></polyline>
                  </svg>
              </button>
              <div class="slider-dots">
                  {images.map((_, index) => (
                    <button class={`dot ${index === 0 ? 'active' : ''}`} data-index={index}></button>
                  ))}
              </div>
          </div>
        ) : (
          <img src={images[0]} alt={title} />
        )}
    </div>
    <div class="card-content">
        <h3>{title}</h3>
        <p>{description}</p>
        <a href={link} class="card-link">Detials Popup</a>
    </div>
</div>

<!-- Full-page modal -->
<div class="modal-overlay" id={`modal-${cardId}`}>
    <div class="modal-content">
        <button class="modal-close" aria-label="Close modal">
            <svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <line x1="18" y1="6" x2="6" y2="18"></line>
                <line x1="6" y1="6" x2="18" y2="18"></line>
            </svg>
        </button>

        <div class="modal-slider">
            <div class="modal-slider-container">
                {hasVideo ? (
                  <video
                    src={video}
                    class="modal-slider-video active"
                    controls
                    autoplay
                    muted
                    loop
                    playsinline
                  />
                ) : (
                  images.map((img, index) => (
                    <img
                      src={img}
                      alt={`${title} - Image ${index + 1}`}
                      class={`modal-slider-image ${index === 0 ? 'active' : ''}`}
                      data-index={index}
                    />
                  ))
                )}
            </div>

            {!hasVideo && images.length > 1 && (
              <>
                  <button class="modal-slider-btn modal-prev-btn" aria-label="Previous image">
                      <svg width="32" height="32" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                          <polyline points="15,18 9,12 15,6"></polyline>
                      </svg>
                  </button>
                  <button class="modal-slider-btn modal-next-btn" aria-label="Next image">
                      <svg width="32" height="32" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                          <polyline points="9,18 15,12 9,6"></polyline>
                      </svg>
                  </button>
              </>
            )}
        </div>

        <div class="modal-info">
            <h2>{title}</h2>
            <p>{description}</p>
        </div>
    </div>
</div>

<style>
    .card {
        background: white;
        border-radius: 4px;
        overflow: hidden;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.07);
        transition: all 0.3s ease;
        height: 100%;
        display: flex;
        flex-direction: column;
        cursor: pointer;
    }

    .card:hover {
        transform: translateY(-8px);
        box-shadow: 0 20px 40px rgba(0, 0, 0, 0.12);
    }

    .card-image {
        height: 200px;
        overflow: hidden;
        background: #000;
        position: relative;
    }

    .card-image img {
        width: 100%;
        height: 100%;
        object-fit: cover;
        transition: transform 0.3s ease;
    }

    .card-image video {
        width: 100%;
        height: 100%;
        object-fit: cover;
        transition: transform 0.3s ease;
    }

    .card:hover .card-image img {
        transform: scale(1.05);
    }

    .card:hover .card-image video {
        transform: scale(1.05);
    }

    /* Image Slider Styles */
    .image-slider {
        position: relative;
        width: 100%;
        height: 100%;
    }

    .slider-container {
        position: relative;
        width: 100%;
        height: 100%;
    }

    .slider-image {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        object-fit: cover;
        opacity: 0;
        transition: opacity 0.5s ease;
    }

    .slider-image.active {
        opacity: 1;
    }

    .slider-btn {
        position: absolute;
        top: 50%;
        transform: translateY(-50%);
        background: rgba(0, 0, 0, 0.5);
        color: white;
        border: none;
        border-radius: 50%;
        width: 40px;
        height: 40px;
        display: flex;
        align-items: center;
        justify-content: center;
        cursor: pointer;
        opacity: 0;
        transition: all 0.3s ease;
        z-index: 2;
    }

    .slider-btn:hover {
        background: rgba(0, 0, 0, 0.7);
    }

    .prev-btn {
        left: 10px;
    }

    .next-btn {
        right: 10px;
    }

    .card:hover .slider-btn {
        opacity: 1;
    }

    .slider-dots {
        position: absolute;
        bottom: 10px;
        left: 50%;
        transform: translateX(-50%);
        display: flex;
        gap: 6px;
        z-index: 2;
    }

    .dot {
        width: 11px;
        height: 11px;
        border-radius: 50%;
        border: none;
        background: rgba(255, 255, 255, 0.5);
        cursor: pointer;
        transition: background 0.3s ease;
    }

    .dot.active {
        background: white;
    }

    .card-content {
        padding: 1.5rem;
        flex: 1;
        display: flex;
        flex-direction: column;
    }

    .card h3 {
        font-size: 1.25rem;
        font-weight: 600;
        margin: 0 0 0.75rem 0;
        color: #1f2937;
    }

    .card p {
        color: #6b7280;
        line-height: 1.6;
        margin: 0 0 1.5rem 0;
        flex: 1;
    }

    .card-link {
        color: #333;
        text-decoration: none;
        font-weight: 500;
        transition: color 0.3s ease;
        align-self: flex-start;
        pointer-events: none;
    }

    .card-link:hover {
        color: #4c51bf;
    }

    .card-link::after {
        content: "â†’";
        margin-left: 0.5rem;
        transition: transform 0.3s ease;
    }

    .card-link:hover::after {
        transform: translateX(4px);
    }

    /* Modal Styles */
    .modal-overlay {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: rgba(0, 0, 0, 0.9);
        display: flex;
        align-items: center;
        justify-content: center;
        z-index: 1000;
        opacity: 0;
        visibility: hidden;
        transition: all 0.3s ease;
    }

    .modal-overlay.active {
        opacity: 1;
        visibility: visible;
    }

    .modal-content {
        position: relative;
        width: 90%;
        max-width: 1200px;
        height: 90%;
        display: flex;
        flex-direction: column;
    }

    .modal-close {
        position: absolute;
        top: 10px;
        right: 10px;
        display: flex;
        align-items: center;
        justify-content: center;
        background: none;
        width: 50px;
        height: 50px;
        border: none;
        color: white;
        cursor: pointer;
        z-index: 1001;
        border-radius: 50%;
        transition: background 0.3s ease;
    }

    .modal-close:hover {
        background: rgba(255, 255, 255, 0.1);
    }

    .modal-slider {
        position: relative;
        flex: 1;
        display: flex;
        align-items: center;
        justify-content: center;
        margin-bottom: 2rem;
    }

    .modal-slider-container {
        position: relative;
        width: 100%;
        height: 100%;
        display: flex;
        align-items: center;
        justify-content: center;
    }

    .modal-slider-image {
        max-width: 100%;
        max-height: 100%;
        object-fit: contain;
        opacity: 0;
        transition: opacity 0.5s ease;
        position: absolute;
    }

    .modal-slider-image.active {
        opacity: 1;
        position: relative;
    }

    .modal-slider-video {
        max-width: 100%;
        max-height: 100%;
        object-fit: contain;
        opacity: 1;
        position: relative;
    }

    .modal-slider-btn {
        position: absolute;
        top: 50%;
        transform: translateY(-50%);
        background: rgba(255, 255, 255, 0.1);
        color: white;
        border: none;
        border-radius: 50%;
        width: 60px;
        height: 60px;
        display: flex;
        align-items: center;
        justify-content: center;
        cursor: pointer;
        transition: all 0.3s ease;
        backdrop-filter: blur(10px);
    }

    .modal-slider-btn:hover {
        background: rgba(255, 255, 255, 0.2);
    }

    .modal-prev-btn {
        left: 20px;
    }

    .modal-next-btn {
        right: 20px;
    }

    .modal-info {
        text-align: center;
        color: white;
        padding: 1rem;
        position: fixed;
        bottom: 0;
        left: 50%;
        transform: translateX(-50%);
        width: 100%
    }

    .modal-info h2 {
        font-size: 1.4rem;
        font-weight: 700;
        margin: 0 0 1rem 0;
        text-shadow: 0 3px 6px rgba(0, 0, 0, 0.5);
    }

    .modal-info p {
        font-size: 1rem;
        opacity: 0.9;
        line-height: 1.6;
        margin: 0;
        text-shadow: 0 3px 6px rgba(0, 0, 0, 0.5);
    }

    @media (max-width: 768px) {
        .modal-content {
            width: 95%;
            height: 95%;
        }

        .modal-slider-btn {
            width: 50px;
            height: 50px;
        }

        .modal-prev-btn {
            left: 10px;
        }

        .modal-next-btn {
            right: 10px;
        }

        .modal-info {
            padding: 0 1rem;
        }

        .modal-info h2 {
            font-size: 1.5rem;
        }

        .modal-info p {
            font-size: 1rem;
        }
    }
</style>

<script is:inline>
    function initializeCardSliders() {
        const cards = document.querySelectorAll('.card');

        cards.forEach(card => {
            const slider = card.querySelector('.image-slider');
            const modal = document.getElementById(`modal-${card.dataset.cardId}`);
            const hasVideo = card.querySelector('video');

            if (slider && !hasVideo) {
                setupCardSlider(card, slider);
            }

            if (modal) {
                setupModal(card, modal, hasVideo);
            }
        });
    }

    function setupCardSlider(card, slider) {
        const images = slider.querySelectorAll('.slider-image');
        const prevBtn = slider.querySelector('.prev-btn');
        const nextBtn = slider.querySelector('.next-btn');
        const dots = slider.querySelectorAll('.dot');
        let currentIndex = 0;
        let autoplayInterval;

        function showImage(index) {
            images.forEach((img, i) => {
                img.classList.toggle('active', i === index);
            });
            dots.forEach((dot, i) => {
                dot.classList.toggle('active', i === index);
            });
            currentIndex = index;
        }

        function nextImage() {
            const nextIndex = (currentIndex + 1) % images.length;
            showImage(nextIndex);
        }

        function prevImage() {
            const prevIndex = (currentIndex - 1 + images.length) % images.length;
            showImage(prevIndex);
        }

        function startAutoplay() {
            // TODO: add auto play only with hover and also add fade animation
            if (images.length > 1) {
                autoplayInterval = setInterval(nextImage, 3000);
            }
        }

        function stopAutoplay() {
            clearInterval(autoplayInterval);
        }

        // Event listeners
        prevBtn.addEventListener('click', (e) => {
            e.stopPropagation();
            prevImage();
        });

        nextBtn.addEventListener('click', (e) => {
            e.stopPropagation();
            nextImage();
        });

        dots.forEach((dot, index) => {
            dot.addEventListener('click', (e) => {
                e.stopPropagation();
                showImage(index);
            });
        });

        // Autoplay controls
        card.addEventListener('mouseenter', stopAutoplay);
        card.addEventListener('mouseleave', startAutoplay);

        // Start autoplay
        startAutoplay();
    }

    function setupModal(card, modal, hasVideo) {
        const modalImages = modal.querySelectorAll('.modal-slider-image');
        const modalVideo = modal.querySelector('.modal-slider-video');
        const modalPrevBtn = modal.querySelector('.modal-prev-btn');
        const modalNextBtn = modal.querySelector('.modal-next-btn');
        const closeBtn = modal.querySelector('.modal-close');
        let modalCurrentIndex = 0;

        function showModalImage(index) {
            modalImages.forEach((img, i) => {
                img.classList.toggle('active', i === index);
            });
            modalCurrentIndex = index;
        }

        function nextModalImage() {
            const nextIndex = (modalCurrentIndex + 1) % modalImages.length;
            showModalImage(nextIndex);
        }

        function prevModalImage() {
            const prevIndex = (modalCurrentIndex - 1 + modalImages.length) % modalImages.length;
            showModalImage(prevIndex);
        }

        // Open modal
        card.addEventListener('click', (e) => {
            if (!e.target.closest('.slider-btn') && !e.target.closest('.dot') && !hasVideo) {
                modal.classList.add('active');
                document.body.style.overflow = 'hidden';
            } else if (hasVideo && !e.target.closest('video')) {
                modal.classList.add('active');
                document.body.style.overflow = 'hidden';
                if (modalVideo) {
                    modalVideo.play();
                }
            }
        });

        // Close modal
        closeBtn.addEventListener('click', () => {
            modal.classList.remove('active');
            document.body.style.overflow = '';
            if (modalVideo) {
                modalVideo.pause();
            }
        });

        modal.addEventListener('click', (e) => {
            if (e.target === modal) {
                modal.classList.remove('active');
                document.body.style.overflow = '';
                if (modalVideo) {
                    modalVideo.pause();
                }
            }
        });

        // Modal navigation
        if (modalPrevBtn && !hasVideo) {
            modalPrevBtn.addEventListener('click', prevModalImage);
        }

        if (modalNextBtn && !hasVideo) {
            modalNextBtn.addEventListener('click', nextModalImage);
        }

        // Keyboard navigation
        document.addEventListener('keydown', (e) => {
            if (modal.classList.contains('active')) {
                if (e.key === 'Escape') {
                    modal.classList.remove('active');
                    document.body.style.overflow = '';
                    if (modalVideo) {
                        modalVideo.pause();
                    }
                } else if (e.key === 'ArrowLeft' && !hasVideo) {
                    prevModalImage();
                } else if (e.key === 'ArrowRight' && !hasVideo) {
                    nextModalImage();
                }
            }
        });
    }

    // Initialize when DOM is loaded
    if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', initializeCardSliders);
    } else {
        initializeCardSliders();
    }
</script>
